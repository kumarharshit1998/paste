@using LossMitigationMVC.Models.AutoFillModels
@model List<ExcelImportModel>

<html>
<head>
    <link rel="stylesheet" href="~/css/site.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <form method="post" asp-action="BULKAutoFill">
        <table width="100%">
            <tr>
                <td colspan="8" class="clsFormHeader" style="text-align:center">Queued Accounts for Auto Fill</td>
            </tr>
            <tr class="clsFormHeader">
                <td>Account Num</td>
                <td>Ref Source</td>
                <td>Status</td>
                <td>Assigned Processor</td>
                <td>Assigned LO</td>
                <td>Assigned CHLS</td>
                <td>Date Loaded</td>
                <td>LMDB ID</td>
            </tr>

            @for (int i = 0; i < Model.Count; i++)
            {
                var css = (i % 2 == 0) ? "clsBlankBoxDark" : "clsBlankBoxLight";
                <tr class="@css lmdb-row">
                    <td>
                        @Html.TextBox($"model[{i}].ACCT_NUM", Model[i].ACCT_NUM)
                    </td>
                    <td>
                        @Html.Hidden($"model[{i}].SOURCE_CODE", Model[i].SOURCE_CODE)
                        @Html.Hidden($"model[{i}].SRC", Model[i].SRC)
                        @Model[i].SRC
                    </td>
                    <td>
                        @Html.Hidden($"model[{i}].STAT", Model[i].STAT)
                        @Model[i].STAT
                    </td>
                    <td>
                        @Html.Hidden($"model[{i}].ASSGN_TO_PR", Model[i].ASSGN_TO_PR)
                        @Model[i].ASSGN_TO_PR
                    </td>
                    <td>
                        @Html.Hidden($"model[{i}].ASSGN_TO_LO", Model[i].ASSGN_TO_LO)
                        @Model[i].ASSGN_TO_LO
                    </td>
                    <td>
                        @Html.Hidden($"model[{i}].ASSGN_TO_CH", Model[i].ASSGN_TO_CH)
                        @Model[i].ASSGN_TO_CH
                    </td>
                    <td>@Model[i].Entered</td>
                    <td class="lmdb-cell">
                        @if (Model[i].LMDB_ID > 0)
                        {
                            <a href="@Url.Action("Customer", "LMIDDetails", new { Imid = Model[i].LMDB_ID })">@Model[i].LMDB_ID</a>
                        }
                    </td>
                </tr>
            }

            <tr>
                <td colspan="8" style="text-align:center" class="clsFormHeader">
                    <input type="hidden" name="Qnum" value="@ViewBag.Qnum" />
                    <button type="submit" name="actionType" value="DeleteAll" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete all?');">Delete All</button>
                    <button type="submit" name="actionType" value="Begin" class="btn btn-primary" id="beginBtn">Begin</button>
                    <a asp-controller="Home" asp-action="Home" class="btn btn-secondary">Exit</a>
                </td>
            </tr>
        </table>
    </form>

    <script>
        $(document).ready(function () {
            $("#beginBtn").click(function (e) {
                e.preventDefault(); // prevent normal submit
                $(".lmdb-row").each(function () {
                    const $row = $(this);
                    const rowData = {
                        ACCT_NUM: $row.find("input[name*='.ACCT_NUM']").val(),
                        SOURCE_CODE: $row.find("input[name*='.SOURCE_CODE']").val(),
                        SRC: $row.find("input[name*='.SRC']").val(),
                        STAT: $row.find("input[name*='.STAT']").val(),
                        ASSGN_TO_PR: $row.find("input[name*='.ASSGN_TO_PR']").val(),
                        ASSGN_TO_LO: $row.find("input[name*='.ASSGN_TO_LO']").val(),
                        ASSGN_TO_CH: $row.find("input[name*='.ASSGN_TO_CH']").val()
                    };

                    $row.find(".lmdb-cell").html("Processing...");

                    $.ajax({
                        url: '@Url.Action("ProcessSingleRow", "AutoFill")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(rowData),
                        success: function (response) {
                            if (response.lmdbId > 0) {
                                const link = `<a href="/LMIDDetails/Customer?Imid=${response.lmdbId}">${response.lmdbId}</a>`;
                                $row.find(".lmdb-cell").html(link);
                            } else {
                                $row.find(".lmdb-cell").html("Failed");
                            }
                        },
                        error: function () {
                            $row.find(".lmdb-cell").html("Error");
                        }
                    });
                });
            });
        });
    </script>
</body>
</html>

























[HttpPost]
[Authorize]
public async Task<IActionResult> BULKAutoFill(List<ExcelImportModel> model, string actionType, int Qnum)
{
    if (actionType == "DeleteAll")
    {
        _autofillreportrepository.DeleteByQnum(Qnum);
        return RedirectToAction("BULKAutoFill");
    }

    // Begin button does nothing server-side; JavaScript handles it
    ViewBag.Qnum = Qnum;
    return View(model); // or RedirectToAction("BULKAutoFill")
}

[HttpPost]
[Authorize]
public async Task<IActionResult> ProcessSingleRow([FromBody] ExcelImportModel row)
{
    string currentUser = HttpContext.User.Identity.Name;

    var clientRecords = await _cifservice.GetClientDataAsync(row.ACCT_NUM);
    if (clientRecords == null || !clientRecords.Any())
    {
        return Json(new { lmdbId = 0 });
    }

    var primary = clientRecords.Count > 1 ? clientRecords[1] : clientRecords[0];
    row.CustName = primary.NameLine1;
    row.Add1 = primary.AddressDetail.Address1;
    row.Add2 = primary.AddressDetail.Address2;
    row.City = primary.AddressDetail.City;
    row.ST = primary.AddressDetail.State;
    row.Zip = primary.AddressDetail.ZIP;
    row.SSN = primary.SSNTIN;
    row.HomePhone = primary.HomePhoneNum;
    row.WorkPhone = primary.WorkPhoneNum;

    var secondary = clientRecords.Count > 1 ? clientRecords[0] : null;
    if (secondary != null)
    {
        row.CustName_2 = secondary.NameLine1;
        row.Add1_2 = secondary.AddressDetail?.Address1;
        row.Add2_2 = secondary.AddressDetail?.Address2;
        row.City_2 = secondary.AddressDetail?.City;
        row.ST_2 = secondary.AddressDetail?.State;
        row.Zip_2 = secondary.AddressDetail?.ZIP;
        row.SSN_2 = secondary.SSNTIN;
        row.HomePhone_2 = secondary.HomePhoneNum;
        row.WorkPhone_2 = secondary.WorkPhoneNum;
    }

    var collateral = await _collateralservice.GetCollateralClientDataAsync(row.ACCT_NUM);
    if (collateral != null)
    {
        row.CollatAdd1 = collateral.Address1;
        row.CollatAdd2 = collateral.Address2;
        row.CollatCity = collateral.City;
        row.Collatst = collateral.State;
        row.CollatZip = collateral.ZIPCode;
    }

    row.fclSaleDt = await _pegacdsservice.GetPegaCDSClientDataAsync(row.ACCT_NUM);

    await _excelimportrepository.GetDatafromCM3INTSTLNSPForExcelImport(row);
    await _excelimportrepository.GetDatafromCM3INTLTLNSPForExcelImport(row);

    if (row.OPL >= 1)
    {
        string lmdbIdStr = await _excelimportrepository.InsertSHAWAutoFillRecordforExcelImport(row, currentUser);
        if (int.TryParse(lmdbIdStr, out int lmdbId))
        {
            return Json(new { lmdbId = lmdbId });
        }
    }

    return Json(new { lmdbId = 0 });
}
